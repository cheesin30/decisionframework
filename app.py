
import io
import os
import json
import yaml
import math
import tempfile
from typing import List, Dict

import pandas as pd
import streamlit as st

import sys
BASE_DIR = os.path.dirname(__file__)
CORE_DIR = os.path.join(BASE_DIR, "wte_decision_framework")
sys.path.append(CORE_DIR)
from framework import run_pipeline

EXAMPLE_DIR = os.path.join(CORE_DIR, "data")

st.set_page_config(page_title="WtE Decision Framework", page_icon="♻️", layout="wide")

# -----------------------------
# Helpers
# -----------------------------
def _load_csv_bytes(b: bytes) -> pd.DataFrame:
    return pd.read_csv(io.BytesIO(b))

def _ensure_square(df: pd.DataFrame, name: str):
    errs = []
    if df.shape[0] != df.shape[1]:
        errs.append(f"{name}: must be square (got {df.shape[0]}x{df.shape[1]}).")
    return errs

def _normalize_weights(weights: Dict[str, float]) -> Dict[str, float]:
    total = sum(max(0.0, float(v)) for v in weights.values())
    if total == 0:
        return {k: 0 for k in weights}
    return {k: float(v) / total for k, v in weights.items()}

def _markdown_report(result: dict, config: dict, notes: str) -> str:
    ranking_md = "\n".join([f"| {a} | {s:.4f} |" for a, s in result["ranking"]])
    weights_md = "\n".join([f"| {k} | {v:.4f} |" for k, v in result["w_sub"].items()])
    benefit_mask = config.get("benefit_mask", [])
    cols = []
    try:
        altdf = pd.read_csv(config["alternatives_svns_csv"])
        cols = altdf.columns.tolist()[1:]
    except Exception:
        pass
    benefits_md = "\n".join([f"| {c} | {'Benefit' if benefit_mask[i] else 'Cost'} |" for i, c in enumerate(cols)])

    return f"""
# Waste-to-Energy (WtE) Site Decision – Assessment Report

**Method:** SVNS → DANP → EDAS (peer-reviewed model)  
**Generated by:** Streamlit UI wrapper (core pipeline unchanged)

## Inputs Overview
- Primary DEMATEL: {os.path.basename(config['primary_matrix_csv'])}
- Secondary DEMATEL blocks: {', '.join([os.path.basename(p) for p in config['secondary_matrix_csvs']])}
- Alternatives SVNS: {os.path.basename(config['alternatives_svns_csv'])}

### EDAS Criterion Direction
| Criterion | Type |
|---|---|
{benefits_md}

### EDAS Weights Used
{ 'Custom override from UI' if 'edas_weights' in config else 'DANP-derived sub-weights' }

## Results (Ranking)
| Alternative | EDAS Score |
|---|---|
{ranking_md}

## Subcriteria Weights (DANP)
| Subcriterion | Weight |
|---|---|
{weights_md}

## Notes / Assumptions
{notes or '- None provided -'}
"""

st.title("♻️ WtE Decision Framework (Online)")
st.caption("Upload or use examples → set benefits/weights → run → download ranking & report.")

with st.sidebar:
    st.header("Steps")
    step = st.radio("Navigation", ["1) Data", "2) Settings", "3) Run", "4) Sensitivity", "5) Help"], index=0)

# -----------------------------
# Step 1: Data
# -----------------------------
if step == "1) Data":
    st.subheader("Upload or Edit Your Data")

    def uploader(label, example_filename):
        default_path = os.path.join(EXAMPLE_DIR, example_filename)
        colA, colB = st.columns([3,1])
        with colA:
            up = st.file_uploader(label, type=["csv"], key=label)
        with colB:
            example = st.button("Use Example", key=label+"_ex")
        if up is not None:
            raw = up.read()
            name = up.name
        else:
            with open(default_path, "rb") as f:
                raw = f.read()
            name = os.path.basename(default_path)
        df = _load_csv_bytes(raw)
        st.write(f"**Preview/Edit:** {name}")
        df_edit = st.data_editor(df, use_container_width=True, num_rows="dynamic")
        return df_edit

    c1 = uploader("Primary DEMATEL (4x4)", "primary_dematel.csv")
    c_env = uploader("Secondary ENV (square)", "secondary_env.csv")
    c_econ = uploader("Secondary ECON (square)", "secondary_econ.csv")
    c_tech = uploader("Secondary TECH (square)", "secondary_tech.csv")
    c_soc = uploader("Secondary SOCIAL (square)", "secondary_social.csv")
    alts = uploader("Alternatives SVNS (rows=alts, first col=alt name)", "alternatives_svns.csv")

    errs = []
    errs += _ensure_square(c1, "Primary DEMATEL")
    errs += _ensure_square(c_env, "Secondary ENV")
    errs += _ensure_square(c_econ, "Secondary ECON")
    errs += _ensure_square(c_tech, "Secondary TECH")
    errs += _ensure_square(c_soc, "Secondary SOCIAL")
    if alts.shape[1] < 2:
        errs.append("Alternatives SVNS: must have at least 2 columns (alt name + ≥1 criterion).")

    if errs:
        st.error("Validation issues:")
        for e in errs:
            st.write("- " + e)
    else:
        st.success("Data looks structurally valid. Proceed to **Settings**.")
    st.session_state["dataframes"] = dict(primary=c1, env=c_env, econ=c_econ, tech=c_tech, social=c_soc, alts=alts)

# -----------------------------
# Step 2: Settings
# -----------------------------
if step == "2) Settings":
    st.subheader("EDAS Settings & Notes")
    dfs = st.session_state.get("dataframes")
    if not dfs:
        st.warning("Please complete **Step 1: Data** first.")
        st.stop()

    alts_df = dfs["alts"]
    cols = alts_df.columns.tolist()[1:]
    st.markdown("**Choose Benefit/Cost per Criterion**")
    benefit_mask = []
    bs_cols = st.columns(len(cols) if cols else 1)
    for i, c in enumerate(cols):
        with bs_cols[i]:
            val = st.selectbox(f"{c}", options=["Benefit", "Cost"], index=0 if i in [2,3,5] else 1)
            benefit_mask.append(val == "Benefit")

    st.markdown("---")
    use_override = st.checkbox("Override EDAS weights (sliders)", value=True)
    edas_weights = {}
    if use_override:
        st.caption("Weights auto-normalise to 1. Set rough importance; we normalise.")
        w_cols = st.columns(min(4, len(cols)) if cols else 1)
        for i, c in enumerate(cols):
            with w_cols[i % len(w_cols)]:
                edas_weights[c] = st.slider(c, 0.0, 1.0, value=0.2 if c not in ("WaterSupply",) else 0.45, step=0.01)
        # normalise
        total = sum(edas_weights.values()) or 1.0
        edas_weights = {k: v/total for k, v in edas_weights.items()}
        st.write("**Normalised Weights:**", edas_weights)
    notes = st.text_area("Assessment Notes / Assumptions (will appear in report)", height=120)

    st.session_state["settings"] = dict(benefit_mask=benefit_mask, edas_weights=edas_weights if use_override else None, notes=notes)

# -----------------------------
# Step 3: Run
# -----------------------------
if step == "3) Run":
    st.subheader("Run Analysis & Export Report")

    dfs = st.session_state.get("dataframes")
    cfgs = st.session_state.get("settings")
    if not dfs or not cfgs:
        st.warning("Please complete **Step 1: Data** and **Step 2: Settings** first.")
        st.stop()

    with tempfile.TemporaryDirectory() as td:
        def save_df(name, df):
            p = os.path.join(td, name)
            df.to_csv(p, index=False)
            return p

        paths = dict(
            primary=save_df("primary_dematel.csv", dfs["primary"]),
            env=save_df("secondary_env.csv", dfs["env"]),
            econ=save_df("secondary_econ.csv", dfs["econ"]),
            tech=save_df("secondary_tech.csv", dfs["tech"]),
            social=save_df("secondary_social.csv", dfs["social"]),
            alts=save_df("alternatives_svns.csv", dfs["alts"]),
        )

        config = {
            "primary_matrix_csv": paths["primary"],
            "secondary_matrix_csvs": [paths["env"], paths["econ"], paths["tech"], paths["social"]],
            "subcriteria_names": [
                "C11_Slope","C12_Elevation","C13_DistRiver","C14_DistLake","C15_DistNatureRes",
                "C21_LandUse","C22_DistTransport","C23_DistSubstation","C24_OpCost","C25_Payback",
                "C31_GridImpact","C32_WaterSupply","C33_PowerLineDifficulty","C34_UnitAdaptability",
                "C41_DistResidential","C42_DistIndustrial","C43_DistSchool","C44_DistMedical"
            ],
            "alternatives_svns_csv": paths["alts"],
            "benefit_mask": cfgs["benefit_mask"],
        }
        if cfgs["edas_weights"]:
            config["edas_weights"] = cfgs["edas_weights"]

        try:
            # Write a temp config file for the pipeline (even though it reads dict too)
            cfg_path = os.path.join(td, "config.yaml")
            with open(cfg_path, "w") as f:
                yaml.safe_dump(config, f)
            result = run_pipeline(cfg_path)

            st.success("Analysis complete.")
            st.subheader("Ranking (best first)")
            rank_df = pd.DataFrame(result["ranking"], columns=["Alternative", "Score"])
            st.dataframe(rank_df, use_container_width=True)

            st.subheader("EDAS Scores (all)")
            scores_df = pd.DataFrame(list(result["edas_scores"].items()), columns=["Alternative", "EDAS Score"])
            st.dataframe(scores_df, use_container_width=True)

            with st.expander("Weights"):
                st.markdown("**Primary group weights (ENV/ECON/TECH/SOC)**")
                st.json(result["w_primary"])
                st.markdown("**Subcriteria weights (DANP)**")
                st.json(result["w_sub"])

            st.download_button("Download results (JSON)", data=json.dumps(result, indent=2), file_name="wte_results.json", mime="application/json")
            csv_bytes = rank_df.to_csv(index=False).encode("utf-8")
            st.download_button("Download ranking (CSV)", data=csv_bytes, file_name="wte_ranking.csv", mime="text/csv")

            report_md = _markdown_report(result, config, cfgs.get("notes",""))
            st.download_button("Download Assessment Report (Markdown)", data=report_md.encode("utf-8"), file_name="wte_assessment_report.md", mime="text/markdown")

        except Exception as e:
            st.error(f"Run failed: {e}")
            st.exception(e)

# -----------------------------
# Step 4: Sensitivity
# -----------------------------
if step == "4) Sensitivity":
    st.subheader("Quick Sensitivity Test (±% on EDAS weights)")
    cfgs = st.session_state.get("settings")
    dfs = st.session_state.get("dataframes")
    if not dfs or not cfgs:
        st.warning("Please complete **Data** and **Settings** first.")
        st.stop()

    pct = st.slider("Vary weights by ±%", 0, 50, 10, 5)
    trials = st.number_input("Number of trials", 5, 100, 20, 5)

    with tempfile.TemporaryDirectory() as td:
        def save_df(name, df):
            p = os.path.join(td, name)
            df.to_csv(p, index=False)
            return p

        paths = dict(
            primary=save_df("primary_dematel.csv", dfs["primary"]),
            env=save_df("secondary_env.csv", dfs["env"]),
            econ=save_df("secondary_econ.csv", dfs["econ"]),
            tech=save_df("secondary_tech.csv", dfs["tech"]),
            social=save_df("secondary_social.csv", dfs["social"]),
            alts=save_df("alternatives_svns.csv", dfs["alts"]),
        )

        base_cfg = {
            "primary_matrix_csv": paths["primary"],
            "secondary_matrix_csvs": [paths["env"], paths["econ"], paths["tech"], paths["social"]],
            "subcriteria_names": [
                "C11_Slope","C12_Elevation","C13_DistRiver","C14_DistLake","C15_DistNatureRes",
                "C21_LandUse","C22_DistTransport","C23_DistSubstation","C24_OpCost","C25_Payback",
                "C31_GridImpact","C32_WaterSupply","C33_PowerLineDifficulty","C34_UnitAdaptability",
                "C41_DistResidential","C42_DistIndustrial","C43_DistSchool","C44_DistMedical"
            ],
            "alternatives_svns_csv": paths["alts"],
            "benefit_mask": cfgs["benefit_mask"],
        }

        import random
        results = []
        for t in range(int(trials)):
            cfg = dict(base_cfg)
            if cfgs["edas_weights"]:
                jitter = {}
                for k, v in cfgs["edas_weights"].items():
                    delta = v * (pct/100.0) * random.uniform(-1, 1)
                    jitter[k] = max(0.0, v + delta)
                s = sum(jitter.values()) or 1.0
                jitter = {k: vv/s for k, vv in jitter.items()}
                cfg["edas_weights"] = jitter
            try:
                res = run_pipeline(os.path.join(td, "cfg.yaml") if False else (lambda c=cfg: (open(os.path.join(td,f"cfg_{t}.yaml"),"w").write(yaml.safe_dump(c)), c)[1])())
                if res["ranking"]:
                    results.append(res["ranking"][0][0])
            except Exception:
                pass

        if results:
            st.write("**Top-1 frequency across trials:**")
            freq = pd.Series(results).value_counts().rename_axis("Alternative").reset_index(name="Count")
            freq["Share"] = (freq["Count"] / freq["Count"].sum()).round(3)
            st.dataframe(freq, use_container_width=True)
        else:
            st.info("No results collected (check data/weights).")

# -----------------------------
# Step 5: Help
# -----------------------------
if step == "5) Help":
    st.subheader("How to Use")
    st.markdown("""
1. **Data**: Upload your 4×4 primary DEMATEL and one square secondary DEMATEL per group (ENV, ECON, TECH, SOC).  
   Upload your **alternatives SVNS** table (first column = name). You can edit tables inline.
2. **Settings**: Pick Benefit/Cost for each EDAS criterion. Optionally set EDAS weights (sliders).
3. **Run**: Get ranking, scores, and weights. Download JSON, CSV, and Markdown report.
4. **Sensitivity**: Vary weights to test winner stability.

SVNS labels accepted: `very_high`, `high`, `moderate`, `low`, `none`, or triples like `0.6;0.35;0.4`.
""")
